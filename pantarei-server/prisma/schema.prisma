generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  id               String             @id @default(dbgenerated("(uuid())")) @db.VarChar(100)
  name             String?            @db.VarChar(50)
  skill_categories skill_categories[]
}

model order_details {
  id                                              String @id @default(dbgenerated("(uuid())")) @db.VarChar(100)
  order_id                                        String @unique(map: "order_id") @db.VarChar(100)
  skill_offered_id                                String @db.VarChar(100)
  skill_requested_id                              String @db.VarChar(100)
  orders                                          orders @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "order_details_ibfk_1")
  skills_order_details_skill_offered_idToskills   skills @relation("order_details_skill_offered_idToskills", fields: [skill_offered_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "order_details_ibfk_2")
  skills_order_details_skill_requested_idToskills skills @relation("order_details_skill_requested_idToskills", fields: [skill_requested_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "order_details_ibfk_3")

  @@index([skill_offered_id], map: "skill_offered_id")
  @@index([skill_requested_id], map: "skill_requested_id")
}

model orders {
  id            String         @id @default(dbgenerated("(uuid())")) @db.VarChar(100)
  status        String         @default(dbgenerated("(_utf8mb4\\'in progress\\')")) @db.VarChar(20)
  created_at    DateTime?      @default(now()) @db.Timestamp(0)
  updated_at    DateTime?      @default(now()) @db.Timestamp(0)
  order_details order_details?
  user_orders   user_orders[]
}

model roles {
  id    Int     @id @default(autoincrement())
  name  String? @db.VarChar(20)
  users users[]
}

model skill_categories {
  skill_id    String     @db.VarChar(100)
  category_id String     @db.VarChar(100)
  skills      skills     @relation(fields: [skill_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "skill_categories_ibfk_1")
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "skill_categories_ibfk_2")

  @@id([skill_id, category_id])
  @@index([category_id], map: "category_id")
}

model skills {
  id                                                     String             @id @default(dbgenerated("(uuid())")) @db.VarChar(100)
  name                                                   String             @db.VarChar(100)
  description                                            String             @db.Text
  order_details_order_details_skill_offered_idToskills   order_details[]    @relation("order_details_skill_offered_idToskills")
  order_details_order_details_skill_requested_idToskills order_details[]    @relation("order_details_skill_requested_idToskills")
  skill_categories                                       skill_categories[]
  user_skills                                            user_skills[]
}

model user_orders {
  user_id  String  @db.VarChar(100)
  order_id String  @db.VarChar(100)
  role     String? @db.VarChar(20)
  users    users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_orders_ibfk_1")
  orders   orders  @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_orders_ibfk_2")

  @@id([user_id, order_id])
  @@index([order_id], map: "order_id")
}

model user_skills {
  user_id   String @db.VarChar(100)
  skill_id  String @db.VarChar(100)
  user_role String @db.VarChar(20)
  users     users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_skills_users_id_fkey")
  skills    skills @relation(fields: [skill_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_skills_ibfk_2")

  @@id([user_id, skill_id])
  @@index([skill_id], map: "skill_id")
}

model users {
  id          String        @id @default(dbgenerated("(uuid())")) @db.VarChar(100)
  name        String        @db.VarChar(30)
  email       String        @unique(map: "email") @db.VarChar(50)
  password    String        @db.VarChar(100)
  role_id     Int
  user_orders user_orders[]
  user_skills user_skills[]
  roles       roles         @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_ibfk_1")

  @@index([role_id], map: "role_id")
}
